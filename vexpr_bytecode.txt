@> コマンド引数:
変数の操作で対象とオペランドに式を使うときの数値引数の構成

arg0: 対象が式であることを意味する固定値4
arg1: 対象式の開始インデックス（ここではargX+1）
arg2: 不使用
arg3: 操作内容
arg4: オペランドが式であることを意味する固定値21
arg5: オペランド式の長さ
arg6 .. argX: オペランド式
argX+1: 対象式の長さ
argX+2 .. argY: 対象式



@> 式: 
現時点では式は1つのノードで構成される



@> ノード: 
ノードは1つのID(1byte)と、直後に続く0個以上の引数から構成される
引数の数や種類はID依存



@> ノードIDリスト: 
[ID] 名前(引数の数): 説明


[00] null(0): 
    必要な引数が途切れていたときなどにあてがわれるデフォルトノード
    評価値は0

[01] 10進数の整数(1): 
    arg0: 1byte(-128 .. 127)の整数

[02] 10進数の整数(1): 
    arg0: 2byte(-32767 .. 32768)の整数

[03] 10進数の整数(1): 
    arg0: 4byte(-2147483648 .. 2147483647)の整数

[04] 16進数の整数(1): 
    arg0: 1byte(-128 .. 127)の整数

[05] 16進数の整数(1): 
    arg0: 2byte(-32767 .. 32768)の整数

[06] 16進数の整数(1): 
    arg0: 4byte(-2147483648 .. 2147483647)の整数

[07] (?): reserved

[08] 変数参照(1): 
    arg0: ノード v[arg0]

[09] スイッチ参照(1): 
    arg0: ノード s[arg0]

[10] (?): reserved
[11] (?): reserved
[12] (?): reserved

[13] 変数番の変数参照(1): 
    arg0: ノード v[v[arg0]]

[14] 変数番のスイッチ参照(1): 
    arg0: ノード s[v[arg0]]
    
[15] (?): reserved
[16] (?): reserved
[17] (?): reserved
[18] (?): reserved

[19] 擬似配列(*):  
    arg0: 1byte 要素数。ただし、この値の最上位bit(0x80)が立っている場合は次に続く4byteを要素数とする
    arg1..: ノード 要素
    
[20] (?): reserved
[21] (?): reserved
[22] (?): reserved
[23] (?): reserved

[24] 符号反転(1): 
    arg0: ノード (-arg0)

[25] 否定(1):
    arg0: ノード (!arg0)

[26] ビット反転(1): 
    arg0: ノード (~arg0)
    
[27] (?): reserved
[28] (?): reserved
[29] (?): reserved
[30] (?): reserved
[31] (?): reserved
[32] (?): reserved
[33] (?): reserved

[34] 代入(2): 
    arg0: 
    arg1: ノード (arg0 = arg1)
    
[35] インプレイスの加算(2): 
    arg0:
    arg1: ノード (arg0 += arg1)
    
[36] インプレイスの減算(2): 
    arg0:
    arg1: ノード(arg0 -= arg1)

[37] インプレイスの乗算(2): 
    arg0: 
    arg1: ノード (arg0 *= arg1)

[38] インプレイスの除算(2): 
    arg0: 
    arg1: ノード (arg0 /= arg1)

[39] インプレイスの剰余(2): 
    arg0: 
    arg1: ノード (arg0 %= arg1)

[40] インプレイスのビット論理和(2): 
    arg0: 
    arg1: ノード (arg0 |= arg1)

[41] インプレイスのビット論理積(2): 
    arg0: 
    arg1: ノード (arg0 &= arg1)

[42] インプレイスのビット排他的論理和(2): 
    arg0: 
    arg1: ノード (arg0 ^= arg1)

[43] インプレイスの左ビットシフト(2): 
    arg0: 
    arg1: ノード (arg0 <<= arg1)

[44] インプレイスの右ビットシフト(2): 
    arg0: 
    arg1: ノード (arg0 >>= arg1)

[45] (?): reserved
[46] (?): reserved
[47] (?): reserved

[48] 加算(2): 
    arg0: 
    arg1: ノード (arg0 + arg1)

[49] 減算(2): 
    arg0: 
    arg1: ノード (arg0 - arg1)

[50] 乗算(2): 
    arg0: 
    arg1: ノード (arg0 * arg1)

[51] 除算(2): 
    arg0: 
    arg1: ノード (arg0 / arg1)

[52] 剰余(2): 
    arg0: 
    arg1: ノード (arg0 % arg1)

[53] ビット論理和(2): 
    arg0: 
    arg1: ノード (arg0 | arg1)

[54] ビット論理積(2): 
    arg0: 
    arg1: ノード (arg0 & arg1)

[55] ビット排他的論理和(2): 
    arg0: 
    arg1: ノード (arg0 ^ arg1)

[56] 左ビットシフト(2): 
    arg0: 
    arg1: ノード (arg0 << arg1)

[57] 右ビットシフト(2): 
    arg0: 
    arg1: ノード (arg0 >> arg1)

[58] 比較 ～と同じ(2): 
    arg0: 
    arg1: ノード (arg0 == arg1)

[59] 比較 ～以上(2): 
    arg0: 
    arg1: ノード (arg0 >= arg1)

[60] 比較 ～以下(2): 
    arg0: 
    arg1: ノード (arg0 <= arg1)

[61] 比較 ～より大きい(2): 
    arg0: 
    arg1: ノード (arg0 > arg1)

[62] 比較 ～より小さい(2): 
    arg0: 
    arg1: ノード (arg0 < arg1)

[63] 比較 ～以外(2): 
    arg0: 
    arg1: ノード (arg0 != arg1)

[64] 論理和(2): 
    arg0: 
    arg1: ノード (arg0 || arg1)

[65] 論理積(2): 
    arg0: 
    arg1: ノード (arg0 && arg1)

[66] 範囲(2): 
    arg0: 
    arg1: ノード (arg0 .. arg1)

[67] 添え字アクセス(2): 
    arg0:
    arg1: ノード arg0[arg1]

[68] (?): reserved
[69] (?): reserved
[70] (?): reserved
[71] (?): reserved

[72] 三項演算(3):  
    arg0:
    arg1:
    arg2: ノード (arg0 ? arg1 : arg2)

[73] (?): reserved
[74] (?): reserved
[75] (?): reserved
[76] (?): reserved
[77] (?): reserved

[78] 組み込み関数(*): 
    後述


    
@> 組み込み関数の引数:
arg0: 1byte 関数の種類(ID)
arg1: 1byte 引数の数。ただし、この値の最上位bit(0x80)が立っている場合は次に続く4byteを引数の数とする
arg2..: ノード 呼び出す関数に与える引数



@> 組み込み関数の種類:
[ID] 名前(引数の数)

[00] rnd(2)
[01] item(2)
[02] event(2) 
[03] actor(2) 
[04] member(2) 
[05] enemy(2) 
[06] misc(1) 
[07] pow(2) 
[08] sqrt(2) 
[09] sin(3) 
[10] cos(3)
[11] atan2(3) 
[12] min(2) 
[13] max(2) 
[14] abs(1)
[15] clamp(3) 
[16] muldiv(3) 
[17] divmul(3) 
[18] between(3)



